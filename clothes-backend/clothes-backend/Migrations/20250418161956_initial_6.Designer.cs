// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using clothes_backend.Models;

#nullable disable

namespace clothes_backend.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250418161956_initial_6")]
    partial class initial_6
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("clothes_backend.Models.BlackListToken", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("create_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("blacklist_token");
                });

            modelBuilder.Entity("clothes_backend.Models.CartItems", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("cart_id")
                        .HasColumnType("int");

                    b.Property<int>("product_variant_id")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("cart_id");

                    b.HasIndex("product_variant_id");

                    b.ToTable("cart_items");
                });

            modelBuilder.Entity("clothes_backend.Models.Carts", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("session_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("user_id");

                    b.ToTable("carts");
                });

            modelBuilder.Entity("clothes_backend.Models.Categories", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("product_types_id")
                        .HasColumnType("int");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("product_types_id");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("clothes_backend.Models.OptionValues", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("option_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("option_id");

                    b.ToTable("option_values");
                });

            modelBuilder.Entity("clothes_backend.Models.Options", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("options");
                });

            modelBuilder.Entity("clothes_backend.Models.OrderDetails", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("order_id")
                        .HasColumnType("int");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("product_variant_id")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("order_id");

                    b.HasIndex("product_variant_id");

                    b.ToTable("order_details");
                });

            modelBuilder.Entity("clothes_backend.Models.OrderHistory", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("product_variant_id")
                        .HasColumnType("int");

                    b.Property<int>("sold_quantity")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("order_history");
                });

            modelBuilder.Entity("clothes_backend.Models.Orders", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("create_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("payment_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("session_id")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("user_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("user_id");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("clothes_backend.Models.ProductOptionImages", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("option_value_id")
                        .HasColumnType("int");

                    b.Property<int>("product_id")
                        .HasColumnType("int");

                    b.Property<string>("src")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("option_value_id");

                    b.HasIndex("product_id");

                    b.ToTable("product_option_images");
                });

            modelBuilder.Entity("clothes_backend.Models.ProductOptions", b =>
                {
                    b.Property<int>("product_id")
                        .HasColumnType("int");

                    b.Property<string>("option_id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("product_id", "option_id");

                    b.HasIndex("option_id");

                    b.ToTable("product_options");
                });

            modelBuilder.Entity("clothes_backend.Models.ProductTypes", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("product_types");
                });

            modelBuilder.Entity("clothes_backend.Models.ProductVariants", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<decimal>("old_price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("percent")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("product_id")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<byte[]>("row_version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("sku")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("product_id");

                    b.ToTable("product_variants");
                });

            modelBuilder.Entity("clothes_backend.Models.Products", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("category_id")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("old_price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("category_id");

                    b.ToTable("products");
                });

            modelBuilder.Entity("clothes_backend.Models.Users", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("expiry_time")
                        .HasColumnType("datetime2");

                    b.Property<bool>("is_lock")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("passwordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("refresh_token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("clothes_backend.Models.Variants", b =>
                {
                    b.Property<int>("product_variant_id")
                        .HasColumnType("int");

                    b.Property<int>("option_value_id")
                        .HasColumnType("int");

                    b.HasKey("product_variant_id", "option_value_id");

                    b.HasIndex("option_value_id");

                    b.ToTable("variants");
                });

            modelBuilder.Entity("clothes_backend.Models.CartItems", b =>
                {
                    b.HasOne("clothes_backend.Models.Carts", "carts")
                        .WithMany("cartItems")
                        .HasForeignKey("cart_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("clothes_backend.Models.ProductVariants", "product_variants")
                        .WithMany("cart_items")
                        .HasForeignKey("product_variant_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("carts");

                    b.Navigation("product_variants");
                });

            modelBuilder.Entity("clothes_backend.Models.Carts", b =>
                {
                    b.HasOne("clothes_backend.Models.Users", "users")
                        .WithMany("carts")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("users");
                });

            modelBuilder.Entity("clothes_backend.Models.Categories", b =>
                {
                    b.HasOne("clothes_backend.Models.ProductTypes", "product_types")
                        .WithMany("categories")
                        .HasForeignKey("product_types_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product_types");
                });

            modelBuilder.Entity("clothes_backend.Models.OptionValues", b =>
                {
                    b.HasOne("clothes_backend.Models.Options", "options")
                        .WithMany("option_values")
                        .HasForeignKey("option_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("options");
                });

            modelBuilder.Entity("clothes_backend.Models.OrderDetails", b =>
                {
                    b.HasOne("clothes_backend.Models.Orders", "orders")
                        .WithMany("order_details")
                        .HasForeignKey("order_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("clothes_backend.Models.ProductVariants", "product_variants")
                        .WithMany("order_details")
                        .HasForeignKey("product_variant_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("orders");

                    b.Navigation("product_variants");
                });

            modelBuilder.Entity("clothes_backend.Models.Orders", b =>
                {
                    b.HasOne("clothes_backend.Models.Users", "users")
                        .WithMany("orders")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("users");
                });

            modelBuilder.Entity("clothes_backend.Models.ProductOptionImages", b =>
                {
                    b.HasOne("clothes_backend.Models.OptionValues", "options_values")
                        .WithMany("product_option_images")
                        .HasForeignKey("option_value_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("clothes_backend.Models.Products", "products")
                        .WithMany("product_option_images")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("options_values");

                    b.Navigation("products");
                });

            modelBuilder.Entity("clothes_backend.Models.ProductOptions", b =>
                {
                    b.HasOne("clothes_backend.Models.Options", "options")
                        .WithMany("product_options")
                        .HasForeignKey("option_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("clothes_backend.Models.Products", "products")
                        .WithMany("product_options")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("options");

                    b.Navigation("products");
                });

            modelBuilder.Entity("clothes_backend.Models.ProductVariants", b =>
                {
                    b.HasOne("clothes_backend.Models.Products", "products")
                        .WithMany("product_variants")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("products");
                });

            modelBuilder.Entity("clothes_backend.Models.Products", b =>
                {
                    b.HasOne("clothes_backend.Models.Categories", "categories")
                        .WithMany("products")
                        .HasForeignKey("category_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("categories");
                });

            modelBuilder.Entity("clothes_backend.Models.Variants", b =>
                {
                    b.HasOne("clothes_backend.Models.OptionValues", "option_values")
                        .WithMany("variants")
                        .HasForeignKey("option_value_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("clothes_backend.Models.ProductVariants", "product_variants")
                        .WithMany("variants")
                        .HasForeignKey("product_variant_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("option_values");

                    b.Navigation("product_variants");
                });

            modelBuilder.Entity("clothes_backend.Models.Carts", b =>
                {
                    b.Navigation("cartItems");
                });

            modelBuilder.Entity("clothes_backend.Models.Categories", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("clothes_backend.Models.OptionValues", b =>
                {
                    b.Navigation("product_option_images");

                    b.Navigation("variants");
                });

            modelBuilder.Entity("clothes_backend.Models.Options", b =>
                {
                    b.Navigation("option_values");

                    b.Navigation("product_options");
                });

            modelBuilder.Entity("clothes_backend.Models.Orders", b =>
                {
                    b.Navigation("order_details");
                });

            modelBuilder.Entity("clothes_backend.Models.ProductTypes", b =>
                {
                    b.Navigation("categories");
                });

            modelBuilder.Entity("clothes_backend.Models.ProductVariants", b =>
                {
                    b.Navigation("cart_items");

                    b.Navigation("order_details");

                    b.Navigation("variants");
                });

            modelBuilder.Entity("clothes_backend.Models.Products", b =>
                {
                    b.Navigation("product_option_images");

                    b.Navigation("product_options");

                    b.Navigation("product_variants");
                });

            modelBuilder.Entity("clothes_backend.Models.Users", b =>
                {
                    b.Navigation("carts");

                    b.Navigation("orders");
                });
#pragma warning restore 612, 618
        }
    }
}
